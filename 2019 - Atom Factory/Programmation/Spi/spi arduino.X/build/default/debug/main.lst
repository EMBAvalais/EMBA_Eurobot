CCS PCH C Compiler, Version 5.074, 38375               21-févr.-19 08:54

               Filename:   H:\data\programmation\SPI arduino\spi arduino.X\build\default\debug\main.lst

               ROM used:   1644 bytes (5%)
                           Largest free fragment is 31120
               RAM used:   53 (3%) at main() level
                           59 (4%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 30

*
0000:  GOTO   04B4
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.3
0056:  GOTO   0060
005A:  BTFSC  F9E.3
005C:  GOTO   010C
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... //------------------------------------------------------------------------------------------ 
.................... //-                        SPI arduino 
.................... //- 
.................... //-   NOM:       Programme principal 
.................... //-   Date:      30.01.2019 
.................... //-   Version:   1.0 
.................... //-   Auteur:    Daniel Duay 
.................... //- 
.................... //- 
.................... //-   description: 
.................... //-   Ce programme permet de tester la communication entre un arduino et un pic18f45k22 en utilisant le bus SPI 
.................... //- 
.................... //- 
.................... //- 
.................... //- 
.................... //------------------------------------------------------------------------------------------ 
....................  
....................  
.................... //------------------------------------------------------------------------------------------ 
.................... //-  Configuration du pic 
.................... //-  et déclarations des librairies 
.................... //------------------------------------------------------------------------------------------ 
....................  
....................  
.................... #include <18F45k22.h> 
.................... //////////// Standard Header file for the PIC18F45K22 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F45K22 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA 38,0C
00C0:  DATA 01,06
00C2:  CLRF   FF7
00C4:  ADDLW  D2
00C6:  MOVWF  FF6
00C8:  MOVLW  00
00CA:  ADDWFC FF7,F
00CC:  TBLRD*+
00CE:  MOVF   FF5,W
00D0:  RETURN 0
00D2:  DATA 74,65
00D4:  DATA 73,74
00D6:  DATA 20,61
00D8:  DATA 72,64
00DA:  DATA 75,69
00DC:  DATA 6E,6F
00DE:  DATA 20,31
00E0:  DATA 32,33
00E2:  DATA 00,00
00E4:  CLRF   FF7
00E6:  ADDLW  F4
00E8:  MOVWF  FF6
00EA:  MOVLW  00
00EC:  ADDWFC FF7,F
00EE:  TBLRD*+
00F0:  MOVF   FF5,W
00F2:  RETURN 0
00F4:  DATA 68,65
00F6:  DATA 6C,6C
00F8:  DATA 6F,00
00FA:  CLRF   FF7
00FC:  ADDLW  0A
00FE:  MOVWF  FF6
0100:  MOVLW  01
0102:  ADDWFC FF7,F
0104:  TBLRD*+
0106:  MOVF   FF5,W
0108:  RETURN 0
010A:  DATA 5A,00
*
011E:  DATA 54,45
0120:  DATA 53,54
0122:  DATA 20,53
0124:  DATA 50,49
0126:  DATA 00,00
0128:  DATA 76,61
012A:  DATA 6C,20
012C:  DATA 3A,20
012E:  DATA 25,78
0130:  DATA 20,00
0132:  DATA 63,74
0134:  DATA 72,6C
0136:  DATA 20,3A
0138:  DATA 20,25
013A:  DATA 75,20
013C:  DATA 00,00
013E:  DATA 63,74
0140:  DATA 72,6C
0142:  DATA 20,3A
0144:  DATA 20,25
0146:  DATA 75,20
0148:  DATA 00,00
014A:  DATA 63,74
014C:  DATA 72,6C
014E:  DATA 20,3A
0150:  DATA 20,25
0152:  DATA 75,20
0154:  DATA 00,00
*
02AE:  TBLRD*+
02B0:  MOVF   FF5,F
02B2:  BZ    02CC
02B4:  MOVFF  FF6,31
02B8:  MOVFF  FF7,32
02BC:  MOVFF  FF5,34
02C0:  RCALL  0266
02C2:  MOVFF  31,FF6
02C6:  MOVFF  32,FF7
02CA:  BRA    02AE
02CC:  GOTO   04FA (RETURN)
02D0:  TBLRD*+
02D2:  MOVFF  FF6,32
02D6:  MOVFF  FF7,33
02DA:  MOVFF  FF5,34
02DE:  RCALL  0266
02E0:  MOVFF  32,FF6
02E4:  MOVFF  33,FF7
02E8:  DECFSZ 31,F
02EA:  BRA    02D0
02EC:  RETURN 0
02EE:  BTFSC  32.7
02F0:  BRA    0310
02F2:  MOVLW  0F
02F4:  MOVWF  00
02F6:  SWAPF  31,W
02F8:  ANDWF  00,F
02FA:  MOVLW  0A
02FC:  SUBWF  00,W
02FE:  BC    0306
0300:  MOVLW  30
0302:  ADDWF  00,F
0304:  BRA    030A
0306:  MOVF   32,W
0308:  ADDWF  00,F
030A:  MOVFF  00,34
030E:  RCALL  0266
0310:  MOVLW  0F
0312:  ANDWF  31,F
0314:  MOVLW  0A
0316:  SUBWF  31,W
0318:  BC    031E
031A:  MOVLW  30
031C:  BRA    0322
031E:  BCF    32.7
0320:  MOVF   32,W
0322:  ADDWF  31,F
0324:  MOVFF  31,34
0328:  RCALL  0266
032A:  GOTO   0526 (RETURN)
*
0426:  MOVF   34,W
0428:  CLRF   01
042A:  SUBWF  33,W
042C:  BC    0434
042E:  MOVFF  33,00
0432:  BRA    044C
0434:  CLRF   00
0436:  MOVLW  08
0438:  MOVWF  35
043A:  RLCF   33,F
043C:  RLCF   00,F
043E:  MOVF   34,W
0440:  SUBWF  00,W
0442:  BTFSC  FD8.0
0444:  MOVWF  00
0446:  RLCF   01,F
0448:  DECFSZ 35,F
044A:  BRA    043A
044C:  RETURN 0
044E:  MOVF   01,W
0450:  MOVFF  31,33
0454:  MOVLW  64
0456:  MOVWF  34
0458:  RCALL  0426
045A:  MOVFF  00,31
045E:  MOVF   01,W
0460:  MOVLW  30
0462:  BNZ   0472
0464:  BTFSS  32.1
0466:  BRA    0480
0468:  BTFSC  32.3
046A:  BRA    0480
046C:  BTFSC  32.4
046E:  MOVLW  20
0470:  BRA    0478
0472:  BCF    32.3
0474:  BCF    32.4
0476:  BSF    32.0
0478:  ADDWF  01,F
047A:  MOVFF  01,34
047E:  RCALL  0266
0480:  MOVFF  31,33
0484:  MOVLW  0A
0486:  MOVWF  34
0488:  RCALL  0426
048A:  MOVFF  00,31
048E:  MOVF   01,W
0490:  MOVLW  30
0492:  BNZ   04A0
0494:  BTFSC  32.3
0496:  BRA    04A8
0498:  BTFSS  32.0
049A:  BRA    04A8
049C:  BTFSC  32.4
049E:  MOVLW  20
04A0:  ADDWF  01,F
04A2:  MOVFF  01,34
04A6:  RCALL  0266
04A8:  MOVLW  30
04AA:  ADDWF  31,F
04AC:  MOVFF  31,34
04B0:  RCALL  0266
04B2:  RETURN 0
....................  
.................... #list 
....................  
.................... #include <18F45K22_register.h> 
.................... #list 
....................  
.................... //#include <18F4520.h> 
.................... //#include <18F_register.h> 
....................  
.................... #device adc=8 
....................  
.................... #use delay(crystal=20000000) 
*
018C:  CLRF   FEA
018E:  MOVLW  35
0190:  MOVWF  FE9
0192:  MOVF   FEF,W
0194:  BZ    01B0
0196:  MOVLW  06
0198:  MOVWF  01
019A:  CLRF   00
019C:  DECFSZ 00,F
019E:  BRA    019C
01A0:  DECFSZ 01,F
01A2:  BRA    019A
01A4:  MOVLW  7B
01A6:  MOVWF  00
01A8:  DECFSZ 00,F
01AA:  BRA    01A8
01AC:  DECFSZ FEF,F
01AE:  BRA    0196
01B0:  RETURN 0
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES NOPLLEN 
....................  
.................... #include <lcd216_8.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD216_8.C                             //// 
.................... ////         Driver for common 2x16 LCD modules with data 8 bits        //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////   EMVS  Ecole des Metiers du Valais                                //// 
.................... ////   Date:      05/06/2004                                            //// 
.................... ////   Version:   1.0                                                   //// 
.................... ////   Auteur:    Daniel Duay                                           //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     E0  rs 
.................... //     E1  rw 
.................... //     E2  enable 
.................... //     D0  D0 
.................... //     D1  D1 
.................... //     D2  D2 
.................... //     D3  D3 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rs;           // on to an I/O port to gain 
....................            BOOLEAN rw;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................         } lcd; 
....................  
....................  
.................... #if defined(__PCH__) 
....................  #byte lcd = 0xF84                // This puts the entire structure 
.................... #else 
....................  #byte lcd = 0x09                 // on to port E (at address 9) 
.................... #endif 
....................  
.................... #define lcd_type 2                // 0=5x7, 1=5x10, 2=2 lines 
....................  
.................... #define set_tris_lcd(x) set_tris_d(x)  // port on Data 
....................  
.................... byte const LCD_READ = 0xFF; 
.................... byte const LCD_WRITE = 0x00; 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x30 | (lcd_type << 2), 0xc, 1, 6}; 
....................                                   // These bytes need to be sent to the LCD 
....................                                   // to start it up. 
....................                                   // The following are used for setting 
....................                                   // the I/O port direction register. 
....................  
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE data; 
....................  
....................       set_tris_lcd(LCD_READ); 
01B2:  MOVLW  FF
01B4:  MOVWF  F95
....................       lcd.rw = 1; 
01B6:  BSF    F84.1
....................       delay_cycles(1); 
01B8:  NOP   
....................       lcd.enable = 1; 
01BA:  BSF    F84.2
....................       delay_cycles(1); 
01BC:  NOP   
....................       data = input_d(); 
01BE:  SETF   F95
01C0:  MOVFF  F83,3A
....................       lcd.enable = 0; 
01C4:  BCF    F84.2
....................       set_tris_lcd(LCD_WRITE); 
01C6:  MOVLW  00
01C8:  MOVWF  F95
....................       return(data); 
01CA:  MOVFF  3A,01
01CE:  GOTO   01D6 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) 
.................... { 
....................       lcd.rs = 0; 
01D2:  BCF    F84.0
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
01D4:  BRA    01B2
01D6:  MOVFF  01,3A
01DA:  BTFSC  01.7
01DC:  BRA    01D4
....................       lcd.rs = address; 
01DE:  BTFSS  38.0
01E0:  BCF    F84.0
01E2:  BTFSC  38.0
01E4:  BSF    F84.0
....................       delay_cycles(1); 
01E6:  NOP   
....................       lcd.rw = 0; 
01E8:  BCF    F84.1
....................       delay_cycles(1); 
01EA:  NOP   
....................       lcd.enable = 0; 
01EC:  BCF    F84.2
....................       set_tris_lcd(LCD_WRITE); 
01EE:  MOVLW  00
01F0:  MOVWF  F95
....................       output_d (n); 
01F2:  CLRF   F95
01F4:  MOVFF  39,F8C
....................       delay_cycles(1); 
01F8:  NOP   
....................       lcd.enable = 1; 
01FA:  BSF    F84.2
....................       delay_us(5); 
01FC:  MOVLW  08
01FE:  MOVWF  00
0200:  DECFSZ 00,F
0202:  BRA    0200
....................       lcd.enable = 0; 
0204:  BCF    F84.2
0206:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     lcd.rs = 0; 
0208:  BCF    F84.0
....................     lcd.rw = 0; 
020A:  BCF    F84.1
....................     lcd.enable = 0; 
020C:  BCF    F84.2
....................     delay_ms(15); 
020E:  MOVLW  0F
0210:  MOVWF  35
0212:  RCALL  018C
....................     for(i=0;i<=3;++i) 
0214:  CLRF   31
0216:  MOVF   31,W
0218:  SUBLW  03
021A:  BNC   0236
....................       { 
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
021C:  CLRF   03
021E:  MOVF   31,W
0220:  RCALL  00AE
0222:  MOVWF  32
0224:  CLRF   38
0226:  MOVWF  39
0228:  RCALL  01D2
....................        delay_us(5); 
022A:  MOVLW  08
022C:  MOVWF  00
022E:  DECFSZ 00,F
0230:  BRA    022E
0232:  INCF   31,F
0234:  BRA    0216
....................       } 
0236:  GOTO   04E8 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
023A:  MOVF   36,W
023C:  XORLW  01
023E:  BZ    0246
0240:  XORLW  03
0242:  BZ    024C
0244:  BRA    0252
....................      case 1 : address=0x80;break; 
0246:  MOVLW  80
0248:  MOVWF  37
024A:  BRA    0256
....................      case 2 : address=0xC0;break; 
024C:  MOVLW  C0
024E:  MOVWF  37
0250:  BRA    0256
....................      default: address=0x80;break; 
0252:  MOVLW  80
0254:  MOVWF  37
....................    } 
....................    address+=x-1; 
0256:  MOVLW  01
0258:  SUBWF  35,W
025A:  ADDWF  37,F
....................    lcd_send_byte(0,address); 
025C:  CLRF   38
025E:  MOVFF  37,39
0262:  RCALL  01D2
0264:  RETURN 0
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
0266:  MOVF   34,W
0268:  XORLW  0C
026A:  BZ    0276
026C:  XORLW  06
026E:  BZ    028A
0270:  XORLW  02
0272:  BZ    0298
0274:  BRA    02A2
....................      case '\f'   : lcd_send_byte(0,1); 
0276:  CLRF   38
0278:  MOVLW  01
027A:  MOVWF  39
027C:  RCALL  01D2
....................                    lcdline=1; 
027E:  MOVLW  01
0280:  MOVWF  19
....................                    delay_ms(10); 
0282:  MOVLW  0A
0284:  MOVWF  35
0286:  RCALL  018C
....................                    break; 
0288:  BRA    02AC
....................      case '\n'   : lcd_gotoxy(1,++lcdline); 
028A:  INCF   19,F
028C:  MOVLW  01
028E:  MOVWF  35
0290:  MOVFF  19,36
0294:  RCALL  023A
....................                    break; 
0296:  BRA    02AC
....................      case '\b'   : lcd_send_byte(0,0x10); 
0298:  CLRF   38
029A:  MOVLW  10
029C:  MOVWF  39
029E:  RCALL  01D2
....................                    break; 
02A0:  BRA    02AC
....................      default     : lcd_send_byte(1,c); 
02A2:  MOVLW  01
02A4:  MOVWF  38
02A6:  MOVFF  34,39
02AA:  RCALL  01D2
....................                    break; 
....................    } 
02AC:  RETURN 0
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs = 0; 
....................     while ( bit_test(lcd_read_byte(),7) ) ; 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
.................... #bit CS     = PORTA.5 
.................... #bit CKE    = SSP1STAT.6 
.................... #bit CKP	= SSP1CON1.4 
.................... #bit Ra5    = PORTA.5 
.................... #bit debug  = PORTC.0 
.................... //#bit SSP_EN = SSP1CON1.5 
.................... //#bit test   = PORTC.5 
....................  
.................... unsigned int8 data; 
.................... int1 data_rcv = 0; 
.................... int8 test[16]; 
....................  
.................... struct etat { 
....................   unsigned int8 bras; 
....................   unsigned int8 msg; 
....................   unsigned int8 cam; 
.................... }; 
....................  
.................... struct etat stat; 
....................  
.................... //********************************************************************************************************************* 
.................... // Fonction permettant d'initialiser le microcontroleur 
.................... // 
.................... // Développé par : Daniel Duay 
.................... // Date          : 15.04.2010  
.................... // Révision      : 
.................... // 
.................... // paramètres    : none 
.................... // return        : none 
.................... // 
.................... //********************************************************************************************************************* 
.................... void init_uc(void)  
.................... { 
.................... trisa = 0xDF; 
*
0156:  MOVLW  DF
0158:  MOVWF  F92
.................... trisb = 0xFF; 
015A:  SETF   F93
.................... trisd = 0xFF; 
015C:  SETF   F95
.................... trise = 0x00; 
015E:  CLRF   F96
.................... trisc = 0xD6; 
0160:  MOVLW  D6
0162:  MOVWF  F94
....................  
.................... setup_wdt(WDT_OFF); 
0164:  BCF    FD1.0
.................... setup_timer_1(T1_DISABLED); 
0166:  CLRF   FCD
0168:  CLRF   FCC
.................... setup_timer_2(T2_DISABLED,0,1); 
016A:  MOVLW  00
016C:  MOVWF  FBA
016E:  MOVLW  00
0170:  MOVWF  FBB
.................... setup_adc_ports(NO_ANALOGS); 
0172:  MOVF   FC1,W
0174:  ANDLW  F0
0176:  MOVWF  FC1
0178:  MOVLW  00
017A:  MOVLB  F
017C:  MOVWF  x38
017E:  MOVWF  x3C
0180:  MOVWF  x39
0182:  MOVWF  x3A
0184:  MOVWF  x3B
.................... //#use spi (SLAVE, ENABLE=PIN_A5, MODE=0, FORCE_HW) 
.................... #use spi (MASTER, MODE=0, BAUD=5000000, FORCE_HW) 
0186:  MOVLB  0
0188:  GOTO   04E6 (RETURN)
....................  
....................  
.................... //enable_interrupts(INT_SSP); 
.................... //enable_interrupts(GLOBAL); 
....................  
.................... } 
....................  
....................  
.................... //********************************************************************************************************************* 
.................... // Fonction permettant de lire la valeur reçue sur le bus SPI 
.................... // 
.................... // Développé par : Daniel Duay 
.................... // Date          :30.01.2019  
.................... // Révision      : 
.................... // 
.................... // paramètres    : none 
.................... // return        : none 
.................... // 
.................... //********************************************************************************************************************* 
.................... #int_SSP 
.................... void SSP_isr(void) 
.................... { 
....................  if( spi_data_is_in() ) 
*
010C:  BTFSS  FC7.0
010E:  BRA    0118
....................  { 
....................    //data = spi_read(0); 
....................    data = SSP1BUF; 
0110:  MOVFF  FC9,1A
....................    SSP1BUF = 0; 
0114:  CLRF   FC9
....................    data_rcv = 1; 
0116:  BSF    1B.0
....................  } 
....................   
0118:  BCF    F9E.3
011A:  GOTO   0060
.................... } 
....................  
....................  
.................... //********************************************************************************************************************* 
.................... // Fonction permettant de lire l'état de l'arduino 
.................... // 
.................... // Développé par : Daniel Duay 
.................... // Date          : 07.02.2019  
.................... // Révision      : 
.................... // 
.................... // paramètres    : structure contenant l'état des 3 variables 
.................... //                 bras variable pour sauvegarder l'état du bras 
.................... //                 msg variable pour signaler si les messages reçu par le slave sont corrects 
.................... //                 cam variable pour sauvegarder l'état de la caméra 
.................... // return        : retourne le status de l'arduino 
.................... //                 3 bits low bit 0..2(status du bras)        
.................... //				   0-> Arret  (le bras a fini tout traitement et attend le prochain ordre)	 
.................... //				   1-> Marche (le bras est entrain d'exécuter l'ordre)													 
.................... //				   2-> Erreur bras 
.................... //                 2 bits middle bit 3..4 (réception message) 
.................... //				   0-> pas de message ou ordre pas traité 
.................... //				   1-> message reçu + checksum OK 
.................... //                 2-> erreur CRC réception message 
.................... //                 3 bits high bit 5..7 (status de la caméra)        
.................... //				   0-> aucune détection (la caméra ne détecte aucun palet)	 
.................... //				   1-> détection niveau 1 (la caméra détecte un palet, le robot doit ralentir )													 
.................... //				   2-> détection niveau 2 (la caméra détecte un palet très proche, le robot doirt s'arrêter)													 
.................... // 
.................... //********************************************************************************************************************* 
.................... Read_etat_arduino(struct etat *value)  
*
03BA:  CLRF   33
.................... { 
.................... unsigned int8 arduino_etat=0; 
....................  
.................... CS	= 0; 
03BC:  BCF    F80.5
.................... delay_us(1); 
03BE:  BRA    03C0
03C0:  BRA    03C2
03C2:  NOP   
.................... arduino_etat = spi_read(0x00); 
03C4:  MOVF   FC9,W
03C6:  CLRF   FC9
03C8:  RRCF   FC7,W
03CA:  BNC   03C8
03CC:  MOVFF  FC9,33
.................... value->bras =  (arduino_etat & 0x07); 
03D0:  MOVFF  31,FE9
03D4:  MOVFF  32,FEA
03D8:  MOVF   33,W
03DA:  ANDLW  07
03DC:  MOVWF  FEF
.................... value->msg =  (arduino_etat & 0x18) >> 3; 
03DE:  MOVLW  01
03E0:  ADDWF  31,W
03E2:  MOVWF  FE9
03E4:  MOVLW  00
03E6:  ADDWFC 32,W
03E8:  MOVWF  FEA
03EA:  MOVF   33,W
03EC:  ANDLW  18
03EE:  MOVWF  00
03F0:  RRCF   00,F
03F2:  RRCF   00,F
03F4:  RRCF   00,F
03F6:  MOVLW  1F
03F8:  ANDWF  00,F
03FA:  MOVFF  00,FEF
.................... value->cam =  (arduino_etat & 0xE0) >> 5; 
03FE:  MOVLW  02
0400:  ADDWF  31,W
0402:  MOVWF  FE9
0404:  MOVLW  00
0406:  ADDWFC 32,W
0408:  MOVWF  FEA
040A:  MOVF   33,W
040C:  ANDLW  E0
040E:  MOVWF  00
0410:  SWAPF  00,F
0412:  RRCF   00,F
0414:  MOVLW  07
0416:  ANDWF  00,F
0418:  MOVFF  00,FEF
.................... delay_us(1); 
041C:  BRA    041E
041E:  BRA    0420
0420:  NOP   
.................... CS	= 1; 
0422:  BSF    F80.5
0424:  RETURN 0
.................... } 
....................  
.................... //********************************************************************************************************************* 
.................... // Fonction permettant de donner un ordre à l'arduino 
.................... // 
.................... // Développé par : Daniel Duay 
.................... // Date          : 07.02.2019  
.................... // Révision      : 
.................... // 
.................... // paramètres    : cmd      = commande à exécuter (int8) valeur de 1 à 255 
.................... //                 taille   = longueur des datas à envoyer max. 16 bytes (int8) 
.................... //                 data     = valeur à envoyer (int8)) 
.................... // return        : none 
.................... //													 
.................... // 
.................... //********************************************************************************************************************* 
.................... unsigned int8 Write_cmd_arduino(unsigned int8 cmd,unsigned int8 taille, unsigned int8 *data )  
*
032E:  CLRF   35
.................... { 
.................... unsigned int8 arduino_etat=0; 
.................... unsigned int8 boucle; 
.................... unsigned int8 crc; 
.................... char hex_crc[2]; 
....................  
.................... debug = 1; 
0330:  BSF    F82.0
.................... if (taille > 16) taille = 16;           // taille du buffer max. à envoyer 
0332:  MOVF   32,W
0334:  SUBLW  10
0336:  BC    033C
0338:  MOVLW  10
033A:  MOVWF  32
.................... CS	= 0; 
033C:  BCF    F80.5
.................... delay_us(1); 
033E:  BRA    0340
0340:  BRA    0342
0342:  NOP   
.................... spi_write(cmd);     // commande à envoyer 
0344:  MOVF   FC9,W
0346:  MOVFF  31,FC9
034A:  RRCF   FC7,W
034C:  BNC   034A
.................... crc = cmd; 
034E:  MOVFF  31,37
.................... spi_write(taille);  // longueur des datas 
0352:  MOVF   FC9,W
0354:  MOVFF  32,FC9
0358:  RRCF   FC7,W
035A:  BNC   0358
.................... crc = crc + taille; 
035C:  MOVF   32,W
035E:  ADDWF  37,F
....................  
.................... for (boucle=0;boucle<taille;boucle++)   // data à envoyer 
0360:  CLRF   36
0362:  MOVF   32,W
0364:  SUBWF  36,W
0366:  BC    0396
.................... { 
....................     spi_write(data[boucle]);         
0368:  MOVF   36,W
036A:  ADDWF  33,W
036C:  MOVWF  FE9
036E:  MOVLW  00
0370:  ADDWFC 34,W
0372:  MOVWF  FEA
0374:  MOVFF  FEF,3A
0378:  MOVF   FC9,W
037A:  MOVFF  3A,FC9
037E:  RRCF   FC7,W
0380:  BNC   037E
....................     crc = crc + data[boucle]; 
0382:  MOVF   36,W
0384:  ADDWF  33,W
0386:  MOVWF  FE9
0388:  MOVLW  00
038A:  ADDWFC 34,W
038C:  MOVWF  FEA
038E:  MOVF   FEF,W
0390:  ADDWF  37,F
0392:  INCF   36,F
0394:  BRA    0362
.................... } 
.................... crc = 0xFF - crc + 1;   // calcul du CRC 
0396:  MOVLW  FF
0398:  BSF    FD8.0
039A:  SUBFWB 37,W
039C:  ADDLW  01
039E:  MOVWF  37
.................... spi_write(crc);         // envoi du CRC 
03A0:  MOVF   FC9,W
03A2:  MOVFF  37,FC9
03A6:  RRCF   FC7,W
03A8:  BNC   03A6
.................... delay_us(10); 
03AA:  MOVLW  10
03AC:  MOVWF  00
03AE:  DECFSZ 00,F
03B0:  BRA    03AE
03B2:  NOP   
.................... CS	= 1; 
03B4:  BSF    F80.5
.................... debug = 0; 
03B6:  BCF    F82.0
03B8:  RETURN 0
.................... } 
....................  
.................... void main() 
*
04B4:  CLRF   FF8
04B6:  BCF    FD0.7
04B8:  BSF    07.7
04BA:  BCF    1B.0
04BC:  BCF    FC6.5
04BE:  MOVLW  40
04C0:  MOVWF  FC7
04C2:  MOVLW  20
04C4:  MOVWF  FC6
04C6:  BCF    F94.5
04C8:  BSF    F94.4
04CA:  BCF    F94.3
04CC:  CLRF   30
04CE:  CLRF   2F
04D0:  MOVLB  F
04D2:  CLRF   x38
04D4:  CLRF   x39
04D6:  CLRF   x3A
04D8:  CLRF   x3B
04DA:  CLRF   x3C
04DC:  CLRF   F77
04DE:  CLRF   F78
04E0:  CLRF   F79
.................... { 
....................  
....................  
.................... init_uc(); 
04E2:  MOVLB  0
04E4:  BRA    0156
.................... lcd_init(); 
04E6:  BRA    0208
....................   
.................... lcd_gotoxy( 1, 1); 
04E8:  MOVLW  01
04EA:  MOVWF  35
04EC:  MOVWF  36
04EE:  RCALL  023A
.................... printf(lcd_putc,"TEST SPI"); 
04F0:  MOVLW  1E
04F2:  MOVWF  FF6
04F4:  MOVLW  01
04F6:  MOVWF  FF7
04F8:  BRA    02AE
....................  
.................... stat.bras = 0; 
04FA:  CLRF   2C
.................... stat.msg = 0; 
04FC:  CLRF   2D
.................... stat.cam = 0; 
04FE:  CLRF   2E
....................   
.................... while(1) 
.................... { 
.................... 	if(data_rcv == 1) 
0500:  BTFSS  1B.0
0502:  BRA    052E
....................     { 
....................         lcd_gotoxy( 1, 2); 
0504:  MOVLW  01
0506:  MOVWF  35
0508:  MOVLW  02
050A:  MOVWF  36
050C:  RCALL  023A
....................         printf(lcd_putc,"val : %x ",data); 
050E:  MOVLW  28
0510:  MOVWF  FF6
0512:  MOVLW  01
0514:  MOVWF  FF7
0516:  MOVLW  06
0518:  MOVWF  31
051A:  RCALL  02D0
051C:  MOVFF  1A,31
0520:  MOVLW  57
0522:  MOVWF  32
0524:  BRA    02EE
0526:  MOVLW  20
0528:  MOVWF  34
052A:  RCALL  0266
....................         data_rcv = 0; 
052C:  BCF    1B.0
....................     } 
....................  
.................... test = "test arduino 123"; 
052E:  CLRF   FEA
0530:  MOVLW  1C
0532:  MOVWF  FE9
0534:  MOVLW  10
0536:  MOVWF  01
0538:  CLRF   FF7
053A:  MOVLW  00
053C:  RCALL  00C2
053E:  TBLRD*-
0540:  TBLRD*+
0542:  MOVFF  FF5,FEE
0546:  DECFSZ 01,F
0548:  BRA    0540
.................... Write_cmd_arduino(0x05,16, &test ); 
054A:  MOVLW  05
054C:  MOVWF  31
054E:  MOVLW  10
0550:  MOVWF  32
0552:  CLRF   34
0554:  MOVLW  1C
0556:  MOVWF  33
0558:  RCALL  032E
.................... Read_etat_arduino(&stat); 
055A:  CLRF   32
055C:  MOVLW  2C
055E:  MOVWF  31
0560:  RCALL  03BA
.................... lcd_gotoxy( 1, 2); 
0562:  MOVLW  01
0564:  MOVWF  35
0566:  MOVLW  02
0568:  MOVWF  36
056A:  RCALL  023A
.................... printf(lcd_putc,"ctrl : %u ",stat.msg); 
056C:  MOVLW  32
056E:  MOVWF  FF6
0570:  MOVLW  01
0572:  MOVWF  FF7
0574:  MOVLW  07
0576:  MOVWF  31
0578:  RCALL  02D0
057A:  MOVFF  2D,31
057E:  MOVLW  1B
0580:  MOVWF  32
0582:  RCALL  044E
0584:  MOVLW  20
0586:  MOVWF  34
0588:  RCALL  0266
.................... delay_ms(1000); 
058A:  MOVLW  04
058C:  MOVWF  31
058E:  MOVLW  FA
0590:  MOVWF  35
0592:  RCALL  018C
0594:  DECFSZ 31,F
0596:  BRA    058E
.................... test = "hello"; 
0598:  CLRF   FEA
059A:  MOVLW  1C
059C:  MOVWF  FE9
059E:  MOVLW  10
05A0:  MOVWF  01
05A2:  CLRF   FF7
05A4:  MOVLW  00
05A6:  RCALL  00E4
05A8:  TBLRD*-
05AA:  TBLRD*+
05AC:  MOVFF  FF5,FEE
05B0:  DECFSZ 01,F
05B2:  BRA    05AA
.................... Write_cmd_arduino(0x02,5, &test ); 
05B4:  MOVLW  02
05B6:  MOVWF  31
05B8:  MOVLW  05
05BA:  MOVWF  32
05BC:  CLRF   34
05BE:  MOVLW  1C
05C0:  MOVWF  33
05C2:  RCALL  032E
.................... Read_etat_arduino(&stat); 
05C4:  CLRF   32
05C6:  MOVLW  2C
05C8:  MOVWF  31
05CA:  RCALL  03BA
.................... lcd_gotoxy( 1, 2); 
05CC:  MOVLW  01
05CE:  MOVWF  35
05D0:  MOVLW  02
05D2:  MOVWF  36
05D4:  RCALL  023A
.................... printf(lcd_putc,"ctrl : %u ",stat.msg); 
05D6:  MOVLW  3E
05D8:  MOVWF  FF6
05DA:  MOVLW  01
05DC:  MOVWF  FF7
05DE:  MOVLW  07
05E0:  MOVWF  31
05E2:  RCALL  02D0
05E4:  MOVFF  2D,31
05E8:  MOVLW  1B
05EA:  MOVWF  32
05EC:  RCALL  044E
05EE:  MOVLW  20
05F0:  MOVWF  34
05F2:  RCALL  0266
.................... delay_ms(1000); 
05F4:  MOVLW  04
05F6:  MOVWF  31
05F8:  MOVLW  FA
05FA:  MOVWF  35
05FC:  RCALL  018C
05FE:  DECFSZ 31,F
0600:  BRA    05F8
.................... test = "Z"; 
0602:  CLRF   FEA
0604:  MOVLW  1C
0606:  MOVWF  FE9
0608:  MOVLW  10
060A:  MOVWF  01
060C:  CLRF   FF7
060E:  MOVLW  00
0610:  RCALL  00FA
0612:  TBLRD*-
0614:  TBLRD*+
0616:  MOVFF  FF5,FEE
061A:  DECFSZ 01,F
061C:  BRA    0614
.................... Write_cmd_arduino(0x13,1, &test ); 
061E:  MOVLW  13
0620:  MOVWF  31
0622:  MOVLW  01
0624:  MOVWF  32
0626:  CLRF   34
0628:  MOVLW  1C
062A:  MOVWF  33
062C:  RCALL  032E
.................... Read_etat_arduino(&stat); 
062E:  CLRF   32
0630:  MOVLW  2C
0632:  MOVWF  31
0634:  RCALL  03BA
.................... lcd_gotoxy( 1, 2); 
0636:  MOVLW  01
0638:  MOVWF  35
063A:  MOVLW  02
063C:  MOVWF  36
063E:  RCALL  023A
.................... printf(lcd_putc,"ctrl : %u ",stat.msg); 
0640:  MOVLW  4A
0642:  MOVWF  FF6
0644:  MOVLW  01
0646:  MOVWF  FF7
0648:  MOVLW  07
064A:  MOVWF  31
064C:  RCALL  02D0
064E:  MOVFF  2D,31
0652:  MOVLW  1B
0654:  MOVWF  32
0656:  RCALL  044E
0658:  MOVLW  20
065A:  MOVWF  34
065C:  RCALL  0266
.................... delay_ms(1000); 
065E:  MOVLW  04
0660:  MOVWF  31
0662:  MOVLW  FA
0664:  MOVWF  35
0666:  RCALL  018C
0668:  DECFSZ 31,F
066A:  BRA    0662
066C:  BRA    0500
....................  
....................  
.................... } 
.................... } 
....................  
066E:  BRA    066E
....................      
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: E200   HSH NOPLLEN PRIMARY_ON FCMEN IESO
   Word  2: 3C19   NOPUT NOBROWNOUT BORV19 NOWDT WDT32768
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0000   NOSTVREN NOLVP NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
