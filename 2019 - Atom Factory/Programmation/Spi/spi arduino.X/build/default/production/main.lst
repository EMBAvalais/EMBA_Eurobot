CCS PCH C Compiler, Version 5.074, 38375               21-févr.-19 09:09

               Filename:   H:\data\programmation\SPI arduino\spi arduino.X\build\default\production\main.lst

               ROM used:   1290 bytes (4%)
                           Largest free fragment is 31478
               RAM used:   30 (2%) at main() level
                           36 (2%) worst case
               Stack used: 4 locations
               Stack size: 31

*
0000:  GOTO   037E
.................... //------------------------------------------------------------------------------------------ 
.................... //-                        SPI arduino 
.................... //- 
.................... //-   NOM:       Programme principal 
.................... //-   Date:      30.01.2019 
.................... //-   Version:   1.0 
.................... //-   Auteur:    Daniel Duay 
.................... //- 
.................... //- 
.................... //-   description: 
.................... //-   Ce programme permet de tester la communication entre un arduino et un pic18f45k22 en utilisant le bus SPI 
.................... //- 
.................... //- 
.................... //- 
.................... //- 
.................... //------------------------------------------------------------------------------------------ 
....................  
....................  
.................... //------------------------------------------------------------------------------------------ 
.................... //-  Configuration du pic 
.................... //-  et déclarations des librairies 
.................... //------------------------------------------------------------------------------------------ 
....................  
....................  
.................... #include <18F45k22.h> 
.................... //////////// Standard Header file for the PIC18F45K22 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F45K22 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 38,0C
0016:  DATA 01,06
0018:  CLRF   FF7
001A:  ADDLW  28
001C:  MOVWF  FF6
001E:  MOVLW  00
0020:  ADDWFC FF7,F
0022:  TBLRD*+
0024:  MOVF   FF5,W
0026:  RETURN 0
0028:  DATA 74,65
002A:  DATA 73,74
002C:  DATA 20,61
002E:  DATA 72,64
0030:  DATA 75,69
0032:  DATA 6E,6F
0034:  DATA 20,31
0036:  DATA 32,33
0038:  DATA 00,00
003A:  CLRF   FF7
003C:  ADDLW  4A
003E:  MOVWF  FF6
0040:  MOVLW  00
0042:  ADDWFC FF7,F
0044:  TBLRD*+
0046:  MOVF   FF5,W
0048:  RETURN 0
004A:  DATA 68,65
004C:  DATA 6C,6C
004E:  DATA 6F,00
0050:  CLRF   FF7
0052:  ADDLW  60
0054:  MOVWF  FF6
0056:  MOVLW  00
0058:  ADDWFC FF7,F
005A:  TBLRD*+
005C:  MOVF   FF5,W
005E:  RETURN 0
0060:  DATA 5A,00
0062:  DATA 54,45
0064:  DATA 53,54
0066:  DATA 20,53
0068:  DATA 50,49
006A:  DATA 00,00
006C:  DATA 63,74
006E:  DATA 72,6C
0070:  DATA 20,3A
0072:  DATA 20,25
0074:  DATA 75,20
0076:  DATA 00,00
0078:  DATA 63,74
007A:  DATA 72,6C
007C:  DATA 20,3A
007E:  DATA 20,25
0080:  DATA 75,20
0082:  DATA 00,00
0084:  DATA 63,74
0086:  DATA 72,6C
0088:  DATA 20,3A
008A:  DATA 20,25
008C:  DATA 75,20
008E:  DATA 00,00
*
01C4:  TBLRD*+
01C6:  MOVF   FF5,F
01C8:  BZ    01E2
01CA:  MOVFF  FF6,1A
01CE:  MOVFF  FF7,1B
01D2:  MOVFF  FF5,1D
01D6:  RCALL  017C
01D8:  MOVFF  1A,FF6
01DC:  MOVFF  1B,FF7
01E0:  BRA    01C4
01E2:  GOTO   03C4 (RETURN)
*
02D2:  TBLRD*+
02D4:  MOVFF  FF6,1B
02D8:  MOVFF  FF7,1C
02DC:  MOVFF  FF5,1D
02E0:  RCALL  017C
02E2:  MOVFF  1B,FF6
02E6:  MOVFF  1C,FF7
02EA:  DECFSZ 1A,F
02EC:  BRA    02D2
02EE:  RETURN 0
02F0:  MOVF   1D,W
02F2:  CLRF   01
02F4:  SUBWF  1C,W
02F6:  BC    02FE
02F8:  MOVFF  1C,00
02FC:  BRA    0316
02FE:  CLRF   00
0300:  MOVLW  08
0302:  MOVWF  1E
0304:  RLCF   1C,F
0306:  RLCF   00,F
0308:  MOVF   1D,W
030A:  SUBWF  00,W
030C:  BTFSC  FD8.0
030E:  MOVWF  00
0310:  RLCF   01,F
0312:  DECFSZ 1E,F
0314:  BRA    0304
0316:  RETURN 0
0318:  MOVF   01,W
031A:  MOVFF  1A,1C
031E:  MOVLW  64
0320:  MOVWF  1D
0322:  RCALL  02F0
0324:  MOVFF  00,1A
0328:  MOVF   01,W
032A:  MOVLW  30
032C:  BNZ   033C
032E:  BTFSS  1B.1
0330:  BRA    034A
0332:  BTFSC  1B.3
0334:  BRA    034A
0336:  BTFSC  1B.4
0338:  MOVLW  20
033A:  BRA    0342
033C:  BCF    1B.3
033E:  BCF    1B.4
0340:  BSF    1B.0
0342:  ADDWF  01,F
0344:  MOVFF  01,1D
0348:  RCALL  017C
034A:  MOVFF  1A,1C
034E:  MOVLW  0A
0350:  MOVWF  1D
0352:  RCALL  02F0
0354:  MOVFF  00,1A
0358:  MOVF   01,W
035A:  MOVLW  30
035C:  BNZ   036A
035E:  BTFSC  1B.3
0360:  BRA    0372
0362:  BTFSS  1B.0
0364:  BRA    0372
0366:  BTFSC  1B.4
0368:  MOVLW  20
036A:  ADDWF  01,F
036C:  MOVFF  01,1D
0370:  RCALL  017C
0372:  MOVLW  30
0374:  ADDWF  1A,F
0376:  MOVFF  1A,1D
037A:  RCALL  017C
037C:  RETURN 0
....................  
.................... #list 
....................  
.................... #include <18F45K22_register.h> 
.................... #list 
....................  
....................  
.................... #device adc=8 
....................  
.................... #use delay(crystal=20000000) 
*
00A2:  CLRF   FEA
00A4:  MOVLW  1E
00A6:  MOVWF  FE9
00A8:  MOVF   FEF,W
00AA:  BZ    00C6
00AC:  MOVLW  06
00AE:  MOVWF  01
00B0:  CLRF   00
00B2:  DECFSZ 00,F
00B4:  BRA    00B2
00B6:  DECFSZ 01,F
00B8:  BRA    00B0
00BA:  MOVLW  7B
00BC:  MOVWF  00
00BE:  DECFSZ 00,F
00C0:  BRA    00BE
00C2:  DECFSZ FEF,F
00C4:  BRA    00AC
00C6:  RETURN 0
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES NOPLLEN 
....................  
.................... #include <lcd216_8.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD216_8.C                             //// 
.................... ////         Driver for common 2x16 LCD modules with data 8 bits        //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////   EMVS  Ecole des Metiers du Valais                                //// 
.................... ////   Date:      05/06/2004                                            //// 
.................... ////   Version:   1.0                                                   //// 
.................... ////   Auteur:    Daniel Duay                                           //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     E0  rs 
.................... //     E1  rw 
.................... //     E2  enable 
.................... //     D0  D0 
.................... //     D1  D1 
.................... //     D2  D2 
.................... //     D3  D3 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rs;           // on to an I/O port to gain 
....................            BOOLEAN rw;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................         } lcd; 
....................  
....................  
.................... #if defined(__PCH__) 
....................  #byte lcd = 0xF84                // This puts the entire structure 
.................... #else 
....................  #byte lcd = 0x09                 // on to port E (at address 9) 
.................... #endif 
....................  
.................... #define lcd_type 2                // 0=5x7, 1=5x10, 2=2 lines 
....................  
.................... #define set_tris_lcd(x) set_tris_d(x)  // port on Data 
....................  
.................... byte const LCD_READ = 0xFF; 
.................... byte const LCD_WRITE = 0x00; 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x30 | (lcd_type << 2), 0xc, 1, 6}; 
....................                                   // These bytes need to be sent to the LCD 
....................                                   // to start it up. 
....................                                   // The following are used for setting 
....................                                   // the I/O port direction register. 
....................  
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE data; 
....................  
....................       set_tris_lcd(LCD_READ); 
00C8:  MOVLW  FF
00CA:  MOVWF  F95
....................       lcd.rw = 1; 
00CC:  BSF    F84.1
....................       delay_cycles(1); 
00CE:  NOP   
....................       lcd.enable = 1; 
00D0:  BSF    F84.2
....................       delay_cycles(1); 
00D2:  NOP   
....................       data = input_d(); 
00D4:  SETF   F95
00D6:  MOVFF  F83,23
....................       lcd.enable = 0; 
00DA:  BCF    F84.2
....................       set_tris_lcd(LCD_WRITE); 
00DC:  MOVLW  00
00DE:  MOVWF  F95
....................       return(data); 
00E0:  MOVFF  23,01
00E4:  GOTO   00EC (RETURN)
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) 
.................... { 
....................       lcd.rs = 0; 
00E8:  BCF    F84.0
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
00EA:  BRA    00C8
00EC:  MOVFF  01,23
00F0:  BTFSC  01.7
00F2:  BRA    00EA
....................       lcd.rs = address; 
00F4:  BTFSS  21.0
00F6:  BCF    F84.0
00F8:  BTFSC  21.0
00FA:  BSF    F84.0
....................       delay_cycles(1); 
00FC:  NOP   
....................       lcd.rw = 0; 
00FE:  BCF    F84.1
....................       delay_cycles(1); 
0100:  NOP   
....................       lcd.enable = 0; 
0102:  BCF    F84.2
....................       set_tris_lcd(LCD_WRITE); 
0104:  MOVLW  00
0106:  MOVWF  F95
....................       output_d (n); 
0108:  CLRF   F95
010A:  MOVFF  22,F8C
....................       delay_cycles(1); 
010E:  NOP   
....................       lcd.enable = 1; 
0110:  BSF    F84.2
....................       delay_us(5); 
0112:  MOVLW  08
0114:  MOVWF  00
0116:  DECFSZ 00,F
0118:  BRA    0116
....................       lcd.enable = 0; 
011A:  BCF    F84.2
011C:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     lcd.rs = 0; 
011E:  BCF    F84.0
....................     lcd.rw = 0; 
0120:  BCF    F84.1
....................     lcd.enable = 0; 
0122:  BCF    F84.2
....................     delay_ms(15); 
0124:  MOVLW  0F
0126:  MOVWF  1E
0128:  RCALL  00A2
....................     for(i=0;i<=3;++i) 
012A:  CLRF   1A
012C:  MOVF   1A,W
012E:  SUBLW  03
0130:  BNC   014C
....................       { 
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0132:  CLRF   03
0134:  MOVF   1A,W
0136:  RCALL  0004
0138:  MOVWF  1B
013A:  CLRF   21
013C:  MOVWF  22
013E:  RCALL  00E8
....................        delay_us(5); 
0140:  MOVLW  08
0142:  MOVWF  00
0144:  DECFSZ 00,F
0146:  BRA    0144
0148:  INCF   1A,F
014A:  BRA    012C
....................       } 
014C:  GOTO   03B2 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
0150:  MOVF   1F,W
0152:  XORLW  01
0154:  BZ    015C
0156:  XORLW  03
0158:  BZ    0162
015A:  BRA    0168
....................      case 1 : address=0x80;break; 
015C:  MOVLW  80
015E:  MOVWF  20
0160:  BRA    016C
....................      case 2 : address=0xC0;break; 
0162:  MOVLW  C0
0164:  MOVWF  20
0166:  BRA    016C
....................      default: address=0x80;break; 
0168:  MOVLW  80
016A:  MOVWF  20
....................    } 
....................    address+=x-1; 
016C:  MOVLW  01
016E:  SUBWF  1E,W
0170:  ADDWF  20,F
....................    lcd_send_byte(0,address); 
0172:  CLRF   21
0174:  MOVFF  20,22
0178:  RCALL  00E8
017A:  RETURN 0
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
017C:  MOVF   1D,W
017E:  XORLW  0C
0180:  BZ    018C
0182:  XORLW  06
0184:  BZ    01A0
0186:  XORLW  02
0188:  BZ    01AE
018A:  BRA    01B8
....................      case '\f'   : lcd_send_byte(0,1); 
018C:  CLRF   21
018E:  MOVLW  01
0190:  MOVWF  22
0192:  RCALL  00E8
....................                    lcdline=1; 
0194:  MOVLW  01
0196:  MOVWF  04
....................                    delay_ms(10); 
0198:  MOVLW  0A
019A:  MOVWF  1E
019C:  RCALL  00A2
....................                    break; 
019E:  BRA    01C2
....................      case '\n'   : lcd_gotoxy(1,++lcdline); 
01A0:  INCF   04,F
01A2:  MOVLW  01
01A4:  MOVWF  1E
01A6:  MOVFF  04,1F
01AA:  RCALL  0150
....................                    break; 
01AC:  BRA    01C2
....................      case '\b'   : lcd_send_byte(0,0x10); 
01AE:  CLRF   21
01B0:  MOVLW  10
01B2:  MOVWF  22
01B4:  RCALL  00E8
....................                    break; 
01B6:  BRA    01C2
....................      default     : lcd_send_byte(1,c); 
01B8:  MOVLW  01
01BA:  MOVWF  21
01BC:  MOVFF  1D,22
01C0:  RCALL  00E8
....................                    break; 
....................    } 
01C2:  RETURN 0
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs = 0; 
....................     while ( bit_test(lcd_read_byte(),7) ) ; 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
.................... #bit CS     = PORTA.5 
....................  
.................... int8 test[16]; 
....................  
.................... struct etat { 
....................   unsigned int8 bras; 
....................   unsigned int8 msg; 
....................   unsigned int8 cam; 
.................... }; 
....................  
.................... struct etat stat; 
....................  
.................... //********************************************************************************************************************* 
.................... // Fonction permettant d'initialiser le microcontroleur 
.................... // 
.................... // Développé par : Daniel Duay 
.................... // Date          : 15.04.2010  
.................... // Révision      : 
.................... // 
.................... // paramètres    : none 
.................... // return        : none 
.................... // 
.................... //********************************************************************************************************************* 
.................... void init_uc(void)  
.................... { 
.................... trisa = 0xDF; 
*
0090:  MOVLW  DF
0092:  MOVWF  F92
.................... trisb = 0xFF; 
0094:  SETF   F93
.................... trisd = 0xFF; 
0096:  SETF   F95
.................... trise = 0x00; 
0098:  CLRF   F96
.................... trisc = 0xD6; 
009A:  MOVLW  D6
009C:  MOVWF  F94
....................  
.................... #use spi (MASTER, MODE=0, BAUD=1000000, FORCE_HW) 
009E:  GOTO   03B0 (RETURN)
.................... } 
....................  
....................  
.................... //********************************************************************************************************************* 
.................... // Fonction permettant de lire l'état de l'arduino 
.................... // 
.................... // Développé par : Daniel Duay 
.................... // Date          : 07.02.2019  
.................... // Révision      : 
.................... // 
.................... // paramètres    : structure contenant l'état des 3 variables 
.................... //                 bras variable pour sauvegarder l'état du bras 
.................... //                 msg variable pour signaler si les messages reçu par le slave sont corrects 
.................... //                 cam variable pour sauvegarder l'état de la caméra 
.................... // return        : retourne le status de l'arduino 
.................... //                 3 bits low bit 0..2(status du bras)        
.................... //				   0-> Arret  (le bras a fini tout traitement et attend le prochain ordre)	 
.................... //				   1-> Marche (le bras est entrain d'exécuter l'ordre)													 
.................... //				   2-> Erreur bras 
.................... //                 2 bits middle bit 3..4 (réception message) 
.................... //				   0-> pas de message ou ordre pas traité 
.................... //				   1-> message reçu + checksum OK 
.................... //                 2-> erreur CRC réception message 
.................... //                 3 bits high bit 5..7 (status de la caméra)        
.................... //				   0-> aucune détection (la caméra ne détecte aucun palet)	 
.................... //				   1-> détection niveau 1 (la caméra détecte un palet, le robot doit ralentir )													 
.................... //				   2-> détection niveau 2 (la caméra détecte un palet très proche, le robot doirt s'arrêter)													 
.................... // 
.................... //********************************************************************************************************************* 
.................... Read_etat_arduino(struct etat *value)  
*
026C:  CLRF   1C
.................... { 
.................... unsigned int8 arduino_etat=0; 
....................  
.................... CS	= 0; 
026E:  BCF    F80.5
.................... delay_us(1); 
0270:  BRA    0272
0272:  BRA    0274
0274:  NOP   
.................... arduino_etat = spi_read(0x00); 
0276:  MOVF   FC9,W
0278:  CLRF   FC9
027A:  RRCF   FC7,W
027C:  BNC   027A
027E:  MOVFF  FC9,1C
.................... value->bras =  (arduino_etat & 0x07); 
0282:  MOVFF  1A,FE9
0286:  MOVFF  1B,FEA
028A:  MOVF   1C,W
028C:  ANDLW  07
028E:  MOVWF  FEF
.................... value->msg =  (arduino_etat & 0x18) >> 3; 
0290:  MOVLW  01
0292:  ADDWF  1A,W
0294:  MOVWF  FE9
0296:  MOVLW  00
0298:  ADDWFC 1B,W
029A:  MOVWF  FEA
029C:  MOVF   1C,W
029E:  ANDLW  18
02A0:  MOVWF  00
02A2:  RRCF   00,F
02A4:  RRCF   00,F
02A6:  RRCF   00,F
02A8:  MOVLW  1F
02AA:  ANDWF  00,F
02AC:  MOVFF  00,FEF
.................... value->cam =  (arduino_etat & 0xE0) >> 5; 
02B0:  MOVLW  02
02B2:  ADDWF  1A,W
02B4:  MOVWF  FE9
02B6:  MOVLW  00
02B8:  ADDWFC 1B,W
02BA:  MOVWF  FEA
02BC:  MOVF   1C,W
02BE:  ANDLW  E0
02C0:  MOVWF  00
02C2:  SWAPF  00,F
02C4:  RRCF   00,F
02C6:  MOVLW  07
02C8:  ANDWF  00,F
02CA:  MOVFF  00,FEF
.................... CS	= 1; 
02CE:  BSF    F80.5
02D0:  RETURN 0
.................... } 
....................  
.................... //********************************************************************************************************************* 
.................... // Fonction permettant de donner un ordre à l'arduino 
.................... // 
.................... // Développé par : Daniel Duay 
.................... // Date          : 07.02.2019  
.................... // Révision      : 
.................... // 
.................... // paramètres    : cmd      = commande à exécuter (int8) valeur de 1 à 255 
.................... //                 taille   = longueur des datas à envoyer max. 16 bytes (int8) 
.................... //                 data     = valeur à envoyer (int8)) 
.................... // return        : none 
.................... //													 
.................... // 
.................... //********************************************************************************************************************* 
.................... unsigned int8 Write_cmd_arduino(unsigned int8 cmd,unsigned int8 taille, unsigned int8 *data )  
.................... { 
.................... unsigned int8 boucle; 
.................... unsigned int8 crc; 
....................  
.................... if (taille > 16) taille = 16;           // taille du buffer max. à envoyer 
*
01E6:  MOVF   1B,W
01E8:  SUBLW  10
01EA:  BC    01F0
01EC:  MOVLW  10
01EE:  MOVWF  1B
.................... CS	= 0; 
01F0:  BCF    F80.5
.................... delay_us(1); 
01F2:  BRA    01F4
01F4:  BRA    01F6
01F6:  NOP   
.................... spi_write(cmd);     // commande à envoyer 
01F8:  MOVF   FC9,W
01FA:  MOVFF  1A,FC9
01FE:  RRCF   FC7,W
0200:  BNC   01FE
.................... crc = cmd; 
0202:  MOVFF  1A,1F
.................... spi_write(taille);  // longueur des datas 
0206:  MOVF   FC9,W
0208:  MOVFF  1B,FC9
020C:  RRCF   FC7,W
020E:  BNC   020C
.................... crc = crc + taille; 
0210:  MOVF   1B,W
0212:  ADDWF  1F,F
....................  
.................... for (boucle=0;boucle<taille;boucle++)   // data à envoyer 
0214:  CLRF   1E
0216:  MOVF   1B,W
0218:  SUBWF  1E,W
021A:  BC    024A
.................... { 
....................     spi_write(data[boucle]);         
021C:  MOVF   1E,W
021E:  ADDWF  1C,W
0220:  MOVWF  FE9
0222:  MOVLW  00
0224:  ADDWFC 1D,W
0226:  MOVWF  FEA
0228:  MOVFF  FEF,20
022C:  MOVF   FC9,W
022E:  MOVFF  20,FC9
0232:  RRCF   FC7,W
0234:  BNC   0232
....................     crc = crc + data[boucle]; 
0236:  MOVF   1E,W
0238:  ADDWF  1C,W
023A:  MOVWF  FE9
023C:  MOVLW  00
023E:  ADDWFC 1D,W
0240:  MOVWF  FEA
0242:  MOVF   FEF,W
0244:  ADDWF  1F,F
0246:  INCF   1E,F
0248:  BRA    0216
.................... } 
.................... crc = 0xFF - crc + 1;   // calcul du CRC 
024A:  MOVLW  FF
024C:  BSF    FD8.0
024E:  SUBFWB 1F,W
0250:  ADDLW  01
0252:  MOVWF  1F
.................... spi_write(crc);         // envoi du CRC 
0254:  MOVF   FC9,W
0256:  MOVFF  1F,FC9
025A:  RRCF   FC7,W
025C:  BNC   025A
.................... delay_us(10); 
025E:  MOVLW  10
0260:  MOVWF  00
0262:  DECFSZ 00,F
0264:  BRA    0262
0266:  NOP   
.................... CS	= 1; 
0268:  BSF    F80.5
026A:  RETURN 0
.................... } 
....................  
.................... void main() 
*
037E:  CLRF   FF8
0380:  BCF    FD0.7
0382:  BCF    FC6.5
0384:  MOVLW  40
0386:  MOVWF  FC7
0388:  MOVLW  03
038A:  MOVWF  FC8
038C:  MOVLW  2A
038E:  MOVWF  FC6
0390:  BCF    F94.5
0392:  BSF    F94.4
0394:  BCF    F94.3
0396:  CLRF   19
0398:  CLRF   18
039A:  MOVLB  F
039C:  CLRF   x38
039E:  CLRF   x39
03A0:  CLRF   x3A
03A2:  CLRF   x3B
03A4:  CLRF   x3C
03A6:  CLRF   F77
03A8:  CLRF   F78
03AA:  CLRF   F79
.................... { 
....................  
....................  
.................... init_uc(); 
03AC:  MOVLB  0
03AE:  BRA    0090
.................... lcd_init(); 
03B0:  BRA    011E
....................   
.................... lcd_gotoxy( 1, 1); 
03B2:  MOVLW  01
03B4:  MOVWF  1E
03B6:  MOVWF  1F
03B8:  RCALL  0150
.................... printf(lcd_putc,"TEST SPI"); 
03BA:  MOVLW  62
03BC:  MOVWF  FF6
03BE:  MOVLW  00
03C0:  MOVWF  FF7
03C2:  BRA    01C4
....................  
.................... stat.bras = 0; 
03C4:  CLRF   15
.................... stat.msg = 0; 
03C6:  CLRF   16
.................... stat.cam = 0; 
03C8:  CLRF   17
....................   
.................... while(1) 
.................... { 
.................... test = "test arduino 123"; 
03CA:  CLRF   FEA
03CC:  MOVLW  05
03CE:  MOVWF  FE9
03D0:  MOVLW  10
03D2:  MOVWF  01
03D4:  CLRF   FF7
03D6:  MOVLW  00
03D8:  RCALL  0018
03DA:  TBLRD*-
03DC:  TBLRD*+
03DE:  MOVFF  FF5,FEE
03E2:  DECFSZ 01,F
03E4:  BRA    03DC
.................... Write_cmd_arduino(0x05,16, &test ); 
03E6:  MOVLW  05
03E8:  MOVWF  1A
03EA:  MOVLW  10
03EC:  MOVWF  1B
03EE:  CLRF   1D
03F0:  MOVLW  05
03F2:  MOVWF  1C
03F4:  RCALL  01E6
.................... Read_etat_arduino(&stat); 
03F6:  CLRF   1B
03F8:  MOVLW  15
03FA:  MOVWF  1A
03FC:  RCALL  026C
.................... lcd_gotoxy( 1, 2); 
03FE:  MOVLW  01
0400:  MOVWF  1E
0402:  MOVLW  02
0404:  MOVWF  1F
0406:  RCALL  0150
.................... printf(lcd_putc,"ctrl : %u ",stat.msg); 
0408:  MOVLW  6C
040A:  MOVWF  FF6
040C:  MOVLW  00
040E:  MOVWF  FF7
0410:  MOVLW  07
0412:  MOVWF  1A
0414:  RCALL  02D2
0416:  MOVFF  16,1A
041A:  MOVLW  1B
041C:  MOVWF  1B
041E:  RCALL  0318
0420:  MOVLW  20
0422:  MOVWF  1D
0424:  RCALL  017C
.................... delay_ms(1000); 
0426:  MOVLW  04
0428:  MOVWF  1A
042A:  MOVLW  FA
042C:  MOVWF  1E
042E:  RCALL  00A2
0430:  DECFSZ 1A,F
0432:  BRA    042A
.................... test = "hello"; 
0434:  CLRF   FEA
0436:  MOVLW  05
0438:  MOVWF  FE9
043A:  MOVLW  10
043C:  MOVWF  01
043E:  CLRF   FF7
0440:  MOVLW  00
0442:  RCALL  003A
0444:  TBLRD*-
0446:  TBLRD*+
0448:  MOVFF  FF5,FEE
044C:  DECFSZ 01,F
044E:  BRA    0446
.................... Write_cmd_arduino(0x02,5, &test ); 
0450:  MOVLW  02
0452:  MOVWF  1A
0454:  MOVLW  05
0456:  MOVWF  1B
0458:  CLRF   1D
045A:  MOVWF  1C
045C:  RCALL  01E6
.................... Read_etat_arduino(&stat); 
045E:  CLRF   1B
0460:  MOVLW  15
0462:  MOVWF  1A
0464:  RCALL  026C
.................... lcd_gotoxy( 1, 2); 
0466:  MOVLW  01
0468:  MOVWF  1E
046A:  MOVLW  02
046C:  MOVWF  1F
046E:  RCALL  0150
.................... printf(lcd_putc,"ctrl : %u ",stat.msg); 
0470:  MOVLW  78
0472:  MOVWF  FF6
0474:  MOVLW  00
0476:  MOVWF  FF7
0478:  MOVLW  07
047A:  MOVWF  1A
047C:  RCALL  02D2
047E:  MOVFF  16,1A
0482:  MOVLW  1B
0484:  MOVWF  1B
0486:  RCALL  0318
0488:  MOVLW  20
048A:  MOVWF  1D
048C:  RCALL  017C
.................... delay_ms(1000); 
048E:  MOVLW  04
0490:  MOVWF  1A
0492:  MOVLW  FA
0494:  MOVWF  1E
0496:  RCALL  00A2
0498:  DECFSZ 1A,F
049A:  BRA    0492
.................... test = "Z"; 
049C:  CLRF   FEA
049E:  MOVLW  05
04A0:  MOVWF  FE9
04A2:  MOVLW  10
04A4:  MOVWF  01
04A6:  CLRF   FF7
04A8:  MOVLW  00
04AA:  RCALL  0050
04AC:  TBLRD*-
04AE:  TBLRD*+
04B0:  MOVFF  FF5,FEE
04B4:  DECFSZ 01,F
04B6:  BRA    04AE
.................... Write_cmd_arduino(0x13,1, &test ); 
04B8:  MOVLW  13
04BA:  MOVWF  1A
04BC:  MOVLW  01
04BE:  MOVWF  1B
04C0:  CLRF   1D
04C2:  MOVLW  05
04C4:  MOVWF  1C
04C6:  RCALL  01E6
.................... Read_etat_arduino(&stat); 
04C8:  CLRF   1B
04CA:  MOVLW  15
04CC:  MOVWF  1A
04CE:  RCALL  026C
.................... lcd_gotoxy( 1, 2); 
04D0:  MOVLW  01
04D2:  MOVWF  1E
04D4:  MOVLW  02
04D6:  MOVWF  1F
04D8:  RCALL  0150
.................... printf(lcd_putc,"ctrl : %u ",stat.msg); 
04DA:  MOVLW  84
04DC:  MOVWF  FF6
04DE:  MOVLW  00
04E0:  MOVWF  FF7
04E2:  MOVLW  07
04E4:  MOVWF  1A
04E6:  RCALL  02D2
04E8:  MOVFF  16,1A
04EC:  MOVLW  1B
04EE:  MOVWF  1B
04F0:  RCALL  0318
04F2:  MOVLW  20
04F4:  MOVWF  1D
04F6:  RCALL  017C
.................... delay_ms(1000); 
04F8:  MOVLW  04
04FA:  MOVWF  1A
04FC:  MOVLW  FA
04FE:  MOVWF  1E
0500:  RCALL  00A2
0502:  DECFSZ 1A,F
0504:  BRA    04FC
0506:  BRA    03CA
....................  
....................  
.................... } 
.................... } 
....................  
0508:  SLEEP 
....................      
....................  
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: E200   HSH NOPLLEN PRIMARY_ON FCMEN IESO
   Word  2: 3C18   PUT NOBROWNOUT BORV19 NOWDT WDT32768
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2D2 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
